import random

# Define an agent class, which now includes group membership (e.g., black or white)
class Agent:
    def __init__(self, id, group, preference, current_location):
        """
        Initialize an Agent with an ID, group (Black/White), preference threshold, and current location.
        group: The population group the agent belongs to (e.g., 'Black' or 'White').
        """
        self.id = id
        self.group = group  # Assign a group to the agent, either Black or White
        self.preference = preference  # Threshold for satisfaction with neighborhood composition
        self.current_location = current_location  # The agent's initial location on the grid

    def calculate_similarity(self, neighbors):
        """
        Calculate the proportion of neighbors belonging to the same group as the agent.
        """
        same_group_neighbors = sum(1 for neighbor in neighbors if neighbor.group == self.group)
        if len(neighbors) == 0:  # Handle edge cases with no neighbors
            return 0  # No neighbors results in no similarity
        return same_group_neighbors / len(neighbors)

    def is_satisfied(self, neighbors):
        """
        Determine if the agent is satisfied with the current neighborhood.
        Satisfaction is based on whether the proportion of similar-group neighbors meets or exceeds their preference.
        """
        return self.calculate_similarity(neighbors) >= self.preference

    def move_to(self, new_location):
        """
        Move the agent to a new location on the grid.
        """
        print(f"Agent {self.id} ({self.group}) moving from {self.current_location.x},{self.current_location.y} "
              f"to {new_location.x},{new_location.y}")
        self.current_location = new_location

class Location:
    def __init__(self, x, y):
        """
        Initialize a grid location with coordinates (x, y) and a list of current agents.
        """
        self.x = x
        self.y = y
        self.current_agents = []  # List to hold agents currently occupying this location

class Grid:
    def __init__(self, size):
        """
        Create a grid of the specified size with empty locations.
        """
        self.size = size
        self.locations = [[Location(x, y) for y in range(size)] for x in range(size)]

    def get_neighbors(self, location):
        """
        Get all neighboring agents around a given location (within a 3x3 grid centered on the location).
        """
        neighbors = []
        for dx in [-1, 0, 1]:
            for dy in [-1, 0, 1]:
                if dx == 0 and dy == 0:
                    continue  # Skip the current location
                nx, ny = location.x + dx, location.y + dy
                if 0 <= nx < self.size and 0 <= ny < self.size:  # Ensure we don't go out of bounds
                    neighbors.extend(self.locations[nx][ny].current_agents)  # Add all agents in the neighbor location
        return neighbors

    def find_vacant_location(self):
        """
        Find a vacant location on the grid where no agents are currently present.
        """
        vacant_locations = [location for row in self.locations for location in row if not location.current_agents]
        return random.choice(vacant_locations) if vacant_locations else None

    def print_grid(self):
        """
        Print the current state of the grid, showing the group membership of agents in each location.
        """
        print("\nGrid State:")
        for row in self.locations:
            row_str = ""
            for location in row:
                if location.current_agents:
                    # Show group membership by the first letter of the group (B for Black, W for White)
                    row_str += f"{location.current_agents[0].group[0]} "
                else:
                    row_str += ". "
            print(row_str)
        print()

class SegregationModel:
    def __init__(self, grid_size, num_agents, group_distribution, preference):
        """
        Initialize the segregation model with a grid, a set of agents, and their group distribution.
        group_distribution: List of group names (e.g., ['Black', 'White']) and how agents are distributed across them.
        """
        self.grid = Grid(grid_size)
        self.agents = [
            Agent(id=i, group=random.choice(group_distribution), preference=random.choice(preference),
                  current_location=self.grid.find_vacant_location())
            for i in range(num_agents)
        ]
        for agent in self.agents:
            agent.current_location.current_agents.append(agent)  # Place agent on the grid

    def run_simulation(self, iterations):
        """
        Run the segregation simulation for a set number of iterations.
        In each iteration, agents compare their current neighborhood with potential new locations.
        """
        for iteration in range(iterations):
            print(f"Iteration {iteration + 1}")
            moved = False  # Track if any agents moved
            for agent in self.agents:
                neighbors = self.grid.get_neighbors(agent.current_location)
                current_similarity = agent.calculate_similarity(neighbors)  # Get the similarity in the current location
                if not agent.is_satisfied(neighbors):  # If not satisfied, check for a better location
                    new_location = self.grid.find_vacant_location()
                    if new_location:
                        new_neighbors = self.grid.get_neighbors(new_location)  # Get similarity in new location
                        new_similarity = agent.calculate_similarity(new_neighbors)
                        # Compare current similarity to potential new similarity
                        if new_similarity > current_similarity:
                            # Move agent if the new location provides a better similarity
                            agent.current_location.current_agents.remove(agent)
                            new_location.current_agents.append(agent)
                            agent.move_to(new_location)
                            moved = True  # Track that an agent moved
            self.grid.print_grid()  # Display the grid after each iteration
            if not moved:
                print("No agents moved. Simulation stabilized.")
                break  # Stop if no agents moved

    def calculate_segregation(self):
        """
        Calculate the segregation index, the proportion of agents satisfied with their neighborhood.
        """
        satisfied_agents = sum(1 for agent in self.agents if agent.is_satisfied(self.grid.get_neighbors(agent.current_location)))
        return satisfied_agents / len(self.agents)  # Return the proportion of satisfied agents

# Example usage with Black and White populations
model = SegregationModel(grid_size=5, num_agents=10, group_distribution=['Black', 'White'], preference=[0.5, 0.7])
model.run_simulation(iterations=10)
segregation_index = model.calculate_segregation()
print(f"Final Segregation Index: {segregation_index:.2f}")
